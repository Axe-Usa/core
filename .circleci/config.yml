version: 2

# A reusable "run" snippet which enables the continued logging of memoryusage
# to a file on disk which can be saved to build artifacts for later analysis.
run_log_mem_use: &run_log_mem_use
  background: true
  name: Setup Memory Logging
  command: |
    # Log memory usage throughout entire build.
    MEMUSELOG=/tmp/memuse.txt /bin/bash -c '\
        while true; do\
          ps -u $USER -e -o pid,%cpu,%mem,rss:10,vsz:10,command:20 \
            --sort=-%mem >> $MEMUSELOG; \
          echo "----------" >> $MEMUSELOG; \
          sleep 1; \
        done'
# This environment is set to every job (and the initial build).
build_machine_environment: &build_machine_environment
    machine: true
    environment:
     MAKEJOBS: -j3
     CHECK_DOC: 0
     CHECK_LOGPRINT: 0
     BOOST_TEST_RANDOM: 1255
     CCACHE_SIZE: 100M
     CCACHE_TEMPDIR: /tmp/.ccache-temp
     CCACHE_COMPRESS: 1
     BASE_OUTDIR: /home/circleci/project/out
     OUTDIR: /home/circleci/project/out/x86_64-unknown-linux-gnu
     SDK_URL: https://bitcoincore.org/depends-sources/sdks
     WINEDEBUG: fixme-all
     HOST: x86_64-unknown-linux-gnu
     PACKAGES: bc python3-zmq
     DEP_OPTS: NO_QT=1 NO_UPNP=1 DEBUG=1
     PYZMQ: true
     RUN_TESTS: true
     GOAL: install
     BITCOIN_CONFIG: --enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER
     BITCOIN_CONFIG_ALL: --disable-dependency-tracking --prefix=/home/circleci/project/depends/x86_64-unknown-linux-gnu --bindir=/home/circleci/project/out/x86_64-unknown-linux-gnu/bin --libdir=/home/circleci/project/out/x86_64-unknown-linux-gnu/lib

jobs:
  Get Ready:
    <<: *build_machine_environment
    steps:
      - run:
          <<: *run_log_mem_use
      - checkout
      - run:
          name: Set PATH
          command: export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
      - run:
          name: Update apt repo
          command: sudo apt-get update
      - run:
          name: Install packages
          command: sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES
      - run:
          name: Unset
          command: unset CC; unset CXX
      - run:
          name: Mkdir
          command: mkdir -p depends/SDKs depends/sdk-sources && ls
      - run:
          name: Make libraries
          command: make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS
      - run:
          name: Get outdir
          command: echo $OUTDIR
      - run:
          name: Set config params
          command: BITCOIN_CONFIG_ALL="--disable-dependency-tracking --prefix=/home/circleci/project/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib"
      - run:
          name: set Cache
          command: depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE
      - run:
          name: Autogen
          command: test -n "$USE_SHELL" && eval '"$USE_SHELL" -c "./autogen.sh"' || ./autogen.sh
      - run:
          name: Configure
          command: ./configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)
      - run:
          name: Make directories
          command: make distdir PACKAGE=bitcoin VERSION=$HOST
      - run:
          name: Enter directory
          command: cd bitcoin-$HOST
      - run:
          name: Configure
          command: ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)
      - run:
          name: Compile
          command: make $MAKEJOBS $GOAL || ( echo "Build failure. Verbose build follows." && make $GOAL V=1 ; false )
      - run:
          name: export libraries
          command: export LD_LIBRARY_PATH=/home/circleci/project/depends/$HOST/lib
      - persist_to_workspace:
          root: .
          paths: .
      - store_artifacts:
          path: /tmp/core_dumps
      - store_artifacts:
          path: /tmp/memuse.txt

  Isolated Tests:
    <<: *build_machine_environment
    steps:
      - run:
          <<: *run_log_mem_use
      - attach_workspace:
          at: .
      - run:
          name: "Print environment"
          command: printenv
      - run:
          name: Run Wispr Tests
          command: src/test/test_wispr
      - run:
          name: Run BTC Util Tests
          command: src/test/bitcoin-util-test.py
      - run:
          name: Run Qt Tests
          command: src/qt/test/test_wispr-qt
      - run:
          name: Run Object Tests
          command: src/univalue/test/object
      - run:
          name: Run No_Nul Tests
          command: src/univalue/test/no_nul
      - run:
          name: Run JSON Tests
          command: src/univalue/test/test_json
      - run:
          name: Run Univalue Tests
          command: src/univalue/test/unitester
      - store_test_results:
          path: ./tmp/results
      - store_artifacts:
          path: ./tmp/results
      - store_artifacts:
          path: /tmp/core_dumps
      - store_artifacts:
          path: /tmp/memuse.txt

#  Test Group 0:
#    <<: *build_machine_environment
#    steps:
#      - run:
#          <<: *run_log_mem_use
#      - run:
#          <<: *run_env_change
#      - attach_workspace:
#          at: .
#      - run:
#          name: "Print environment"
#          command: printenv
#      - run:
#          name: "Running self-test (Test Group 0)"
#          command: |
#            if [ -f ./tmp/test-groups/0.txt ]; then TEST_GROUP=$(<./tmp/test-groups/0.txt); else TEST_GROUP='^[a-b]|^c[a-n]|^co[a-l]|^comm'; fi
#            echo $TEST_GROUP;
#            eval $PRE_TEST_COMMANDS;
#            ./meteor self-test \
#              "$TEST_GROUP" \
#              --retries ${METEOR_SELF_TEST_RETRIES} \
#              --exclude "${SELF_TEST_EXCLUDE}" \
#              --headless \
#              --junit ./tmp/results/junit/0.xml \
#              --without-tag "custom-warehouse"
#          no_output_timeout: 20m
#      - run:
#          <<: *run_save_node_bin
#      - store_test_results:
#          path: ./tmp/results
#      - persist_to_workspace:
#          root: .
#          paths: ./tmp/results/junit
#      - store_artifacts:
#          path: ./tmp/results
#      - store_artifacts:
#          path: /tmp/core_dumps
#      - store_artifacts:
#          path: /tmp/memuse.txt

#  Clean Up:
#    <<: *build_machine_environment
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Create Test Groups Directory
#          command: |
#            sudo mkdir -p ./tmp/test-groups
#            sudo chmod a+rwx ./tmp/test-groups
#      - run:
#          name: Calculate Balanced Test Groups
#          command: |
#            npm install --prefix ./scripts/test-balancer
#            npm start --prefix ./scripts/test-balancer --num-groups ${NUM_GROUPS} --running-avg-length ${RUNNING_AVG_LENGTH}
#      - save_cache:
#          key: test-groups-v1-{{ .Branch }}-{{ .BuildNum }}
#          paths:
#            - ./tmp/test-groups
#          when: on_success
#      - save_cache:
#          key: dev-bundle-cache-{{ checksum "meteor" }}
#          paths:
#            - "dev_bundle"
#      - save_cache:
#          key: other-deps-cache-{{ .Branch }}-{{ .Revision }}
#          paths:
#            - ".babel-cache"
#            - ".meteor"

workflows:
  version: 2
  Build and Test:
    jobs:
      - Get Ready
      - Isolated Tests:
          requires:
            - Get Ready
      - Clean Up:
          requires:
            - Isolated Tests